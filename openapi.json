{
  "openapi": "3.0.0",
  "info": {
    "title": "Linkplay/WiiM HTTP API",
    "description": "HTTP API for Linkplay/WiiM devices. This API is based on the HTTP API for WiiM PRODUCTS Version 1.2, with additions from others.\n\nYou can send 'HTTPS: Get' requests to the device, most of the responses are a simple 'OK' or in the JSON format.\n\n\nThe request format is 'https://x.x.x.x/httpapi.asp?command=********'\n\n- Where x.x.x.x is the IP address of your WiiM device (In the descriptions, we assume the IP of the device is 10.10.10.254)\n- ******* is the actual command.\n\n\nCommands can contain both integers and strings, denoted as '%d' for integers and '%s' for strings, respectively.\n\n\nThis Swagger doc uses a reverse proxy to access the device. See the description for the actual command.\n\nNote that Linkplay is a provider of the hardware and software for these devices. WiiM is a brand that uses Linkplay hardware and software.\nHowever other brands may also use Linkplay hardware and software, so this API may or may not work with other brands as well, such as Arylic.\n\nIf a command doesn't work with your device, it may be that the command is not supported by the device or that the device is not a WiiM device. The command may also be specific to a certain version of the firmware. \n\nIf you have a different brand, you may want to check the documentation for that brand. You'll find commands here that are deprecated: these are commands that are no longer supported by the device or may be brand specific. You can still use them, but they may not work as expected.",
    "version": "1.2.0",
    "contact": {}
  },
  "servers": [
    {
      "url": "http://localhost:3000/proxy",
      "description": "Reverse proxy to access the device. See the README for more information."
    }
  ],
  "tags": [
    {
      "name": "Generic",
      "description": "Generic command for testing"
    },
    {
      "name": "Device information",
      "description": "Get the device information"
    },
    {
      "name": "Track Metadata",
      "description": "Get Current Track Metadata"
    },
    {
      "name": "Playback control",
      "description": "Get and set playback controls"
    },
    {
      "name": "Network",
      "description": "Get the network status"
    },
    {
      "name": "Equalizer",
      "description": "Get and set equalizer settings"
    },
    {
      "name": "Device control",
      "description": "Control the device"
    },
    {
      "name": "Alarm clock",
      "description": "Get and set alarm clock"
    },
    {
      "name": "Source Input Switch",
      "description": "Switch between inputs"
    },
    {
      "name": "Presets",
      "description": "Manage presets\n\nThe WiiM Home App allows users to configure 12 presets for quick access to\npreferred radio stations, playlists, mixes, albums, or artists. Each preset is accessible through its assigned number."
    },
    {
      "name": "Audio Output Control",
      "description": "Get and set audio output mode"
    },
    {
      "name": "Bluetooth",
      "description": "Get and set Bluetooth settings"
    },
    {
      "name": "Other",
      "description": "Existing commands, purpose unkown. To research further..."
    }
  ],
  "paths": {
    "/{command}": {
      "get": {
        "summary": "Generic command",
        "description": "Generic command to the device. All calls will follow the format /httpapi.asp?command={command}.\n\n\nThe actual command is passed as a path parameter. With this, you can test out any command that is not explicitly defined in this API.\n\nThe response could be a simple 'OK' or an object with data. The actual response will depend on the command sent. If you get an 'unknown command' response, the command is not supported by the device.\n\n\nExamples:\n-  'getStatusEx' will do an /httpapi.asp?command=getStatusEx\n-  'setPlayerCmd:pause' will do an /httpapi.asp?command=setPlayerCmd:pause\n-  'setPlayerCmd:resume' will do an /httpapi.asp?command=setPlayerCmd:resume",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [
          {
            "name": "command",
            "description": "The actual command to send to the device. Note that the command is case-sensitive.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "getStatusEx"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "OK": {
                    "summary": "Response OK",
                    "value": "OK"
                  },
                  "object": {
                    "summary": "Response Object",
                    "value": "{\"foo\":\"bar\"}"
                  },
                  "unknown-command": {
                    "summary": "Response 'Unknown command'",
                    "value": "unknown command"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Generic"
        ],
        "operationId": "genericCommand"
      }
    },
    "/getStatusEx": {
      "get": {
        "tags": [
          "Device information"
        ],
        "summary": "Get device information",
        "description": "Makes a call to https://10.10.10.254/httpapi.asp?command=getStatusEx\n\n\nRetrieves detailed informations about a connected device.\n\nThe documented output may or may not be complete or differ from what the\ndevice actually reports.",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "operationId": "getStatusEx",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceStatus"
                }
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/getMetaInfo": {
      "get": {
        "summary": "Get Current Track Metadata",
        "description": "JSON Response\n{\n \"metaData\": {\n  \"album\": \"Country Heat\",\n  \"title\": \"Old Dirt Roads\",\n  \"subtitle\": \"\",\n  \"artist\": \"Owen Riegling\",\n  \"albumArtURI \": \"https://m.media-amazon.com/images/I/51iU0odzJwL.jpg\",\n  \"sampleRate \": \"44100\",\n  \"bitDepth\": \"16\",\n  \"bitRate\": \"63\",\n  \"trackId\": \"s6707\",\n }\n}",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/TrackMetadata"
                }
              }
            }
          }
        },
        "tags": [
          "Track Metadata"
        ],
        "operationId": "getMetaInfo"
      }
    },
    "/getPlayerStatus": {
      "get": {
        "tags": [
          "Playback control"
        ],
        "summary": "Get the playback status",
        "description": "Makes a call to https://10.10.10.254/httpapi.asp?command=getPlayerStatus",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerStatus"
                }
              }
            }
          }
        },
        "parameters": [],
        "operationId": "getPlayerStatus"
      }
    },
    "/setPlayerCmd:hex_playlist:url:{index}": {
      "get": {
        "summary": "Play a specific track from a playlist by URL and index",
        "description": "http://10.10.10.254/httpapi.asp?command=setPlayerCmd:hex_playlist:url:<index>\n\nPlay the URl (URI is the m3u or ASX playlist link, index is the start\nindex), here, url should be hexed (please refer to 1.3)\n",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [
          {
            "name": "index",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "tags": [
          "Playback control"
        ],
        "deprecated": true,
        "operationId": "setPlayerCmdHexPlaylistUrl"
      }
    },
    "/setPlayerCmd:pause": {
      "get": {
        "summary": "Pause",
        "description": "https://10.10.10.254/httpapi.asp?command=setPlayerCmd:pause",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/StringOK"
          }
        },
        "tags": [
          "Playback control"
        ],
        "operationId": "setPlayerCmdPause"
      }
    },
    "/setPlayerCmd:resume": {
      "get": {
        "summary": "Resume",
        "description": "https://10.10.10.254/httpapi.asp?command=setPlayerCmd:resume",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/StringOK"
          }
        },
        "tags": [
          "Playback control"
        ],
        "operationId": "setPlayerCmdResume"
      }
    },
    "/setPlayerCmd:onepause": {
      "get": {
        "summary": "Toggle pause/play",
        "description": "https://10.10.10.254/httpapi.asp?command=setPlayerCmd:onepause\n\nIf the state is paused, resume it; otherwise, pause it.",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/StringOK"
          }
        },
        "tags": [
          "Playback control"
        ],
        "operationId": "setPlayerCmdOnePause"
      }
    },
    "/setPlayerCmd:play:{url}": {
      "get": {
        "summary": "Play audio URL",
        "description": "https://10.10.10.254/httpapi.asp?command=setPlayerCmd:play:url\nPlay the URL. URL points to an audio stream address.\nResponse is always 'OK' now",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [
          {
            "name": "url",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "default": "http://as-hls-ww-live.akamaized.net/pool_01505109/live/ww/bbc_radio_one/bbc_radio_one.isml/bbc_radio_one-audio%3d96000.norewind.m3u8"
            },
            "description": "URL points to an audio stream address"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/StringOK"
          }
        },
        "tags": [
          "Playback control"
        ],
        "operationId": "setPlayerCmdPlayUrl"
      }
    },
    "/setPlayerCmd:playlist:{url}:{index}": {
      "get": {
        "summary": "Play audio playlist",
        "description": "https://10.10.10.254/httpapi.asp?command=setPlayerCmd:playlist:url:<index>\n\nPlay the playlist with the URL (URL points to the m3u or ASX playlist\nlink, index is the start index).\n\nResponse is always 'OK' now.",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [
          {
            "name": "index",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "default": "https://gist.githubusercontent.com/bpsib/67089b959e4fa898af69fea59ad74bc3/raw/685789e28187c0a15da978b51d436a140d5ea207/BBC-Radio-HLS.m3u"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/StringOK"
          }
        },
        "tags": [
          "Playback control"
        ],
        "operationId": "setPlayerCmdPlaylistUrl"
      }
    },
    "/setPlayerCmd:prev": {
      "get": {
        "summary": "Previous",
        "description": "https://10.10.10.254/httpapi.asp?command=setPlayerCmd:prev",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/StringOK"
          }
        },
        "tags": [
          "Playback control"
        ],
        "operationId": "setPlayerCmdPrev"
      }
    },
    "/setPlayerCmd:next": {
      "get": {
        "summary": "Next",
        "description": "https://10.10.10.254/httpapi.asp?command=setPlayerCmd:next",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/StringOK"
          }
        },
        "tags": [
          "Playback control"
        ],
        "operationId": "setPlayerCmdNext"
      }
    },
    "/setPlayerCmd:seek:position": {
      "get": {
        "summary": "Seek",
        "description": "https://10.10.10.254/httpapi.asp?command=setPlayerCmd:seek:position\nPosition is from 0 to duration in second.",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/StringOK"
          }
        },
        "tags": [
          "Playback control"
        ],
        "operationId": "setPlayerCmdSeekPosition"
      }
    },
    "/setPlayerCmd:stop": {
      "get": {
        "summary": "Stop",
        "description": "https://10.10.10.254/httpapi.asp?command=setPlayerCmd:stop",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/StringOK"
          }
        },
        "tags": [
          "Playback control"
        ],
        "operationId": "setPlayerCmdStop"
      }
    },
    "/setPlayerCmd:vol:{value}": {
      "get": {
        "summary": "Set volume",
        "description": "https://10.10.10.254/httpapi.asp?command=setPlayerCmd:vol:value\nValue can be 0 to 100.",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Value can be 0 to 100."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/StringOK"
          }
        },
        "tags": [
          "Playback control"
        ],
        "operationId": "setPlayerCmdVol"
      }
    },
    "/setPlayerCmd:mute:{n}": {
      "get": {
        "summary": "Mute",
        "description": "https://10.10.10.254/httpapi.asp?command=setPlayerCmd:mute:n\n\nMute: n=1\n\nUnmute: n=0\n\nThe slave mute state will be set at the same time when it's in group\nplay.",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [
          {
            "name": "n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 1
            },
            "description": "Mute: n=1\nUnmute: n=0"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/StringOK"
          }
        },
        "tags": [
          "Playback control"
        ],
        "operationId": "setPlayerCmdMute"
      }
    },
    "/setPlayerCmd:loopmode:{n}": {
      "get": {
        "summary": "Loop mode set",
        "description": "https://10.10.10.254/httpapi.asp?command=setPlayerCmd:loopmode:n\n\nn = \n- -1: ...\n- 0: Shuffle disabled, Repeat enabled - loop\n- 1: Shuffle disabled, Repeat enabled - loop once\n- 2: Shuffle enabled, Repeat enabled - loop\n- 3: Shuffle enabled, Repeat disabled\n- 4: Shuffle disabled, Repeat disabled\n- 5: Shuffle enabled, Repeat enabled - loop once\n",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [
          {
            "name": "n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "enum": [
                -1,
                0,
                1,
                2,
                3,
                4,
                5
              ],
              "default": 4
            },
            "description": "- -1: ...\n- 0: Shuffle disabled, Repeat enabled - loop\n- 1: Shuffle disabled, Repeat enabled - loop once\n- 2: Shuffle enabled, Repeat enabled - loop\n- 3: Shuffle enabled, Repeat disabled\n- 4: Shuffle disabled, Repeat disabled\n- 5: Shuffle enabled, Repeat enabled - loop once"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/StringOK"
          }
        },
        "tags": [
          "Playback control"
        ],
        "operationId": "setPlayerCmdLoopmode"
      }
    },
    "/getStaticIpInfo": {
      "get": {
        "tags": [
          "Network"
        ],
        "summary": "Get the static IP information",
        "description": "Makes a call to https://10.10.10.254/httpapi.asp?command=getStaticIpInfo\n\nIf the WiiM device is configured to use DHCP, the above string values will be empty (see the ethernet related keys).",
        "externalDocs": {
          "description": "WiiM Extended HTTP API by DanBrezeanu",
          "url": "https://github.com/DanBrezeanu/wiim-extended-http-api"
        },
        "operationId": "getStaticIpInfo",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/StaticIpInfo"
                }
              }
            }
          }
        }
      }
    },
    "/getStaticIP": {
      "get": {
        "tags": [
          "Network"
        ],
        "deprecated": true,
        "summary": "Query networking status",
        "description": "Query current networking status",
        "externalDocs": {
          "description": "Arylic Developers",
          "url": "https://developer.arylic.com/httpapi/#http-api"
        },
        "operationId": "getStaticIP",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/wlanGetConnectState": {
      "get": {
        "tags": [
          "Network"
        ],
        "summary": "Get the connection status",
        "description": "Makes a call to\nhttps://10.10.10.254/httpapi.asp?command=wlanGetConnectState\n\n\nNote the return result is not in json.\n\n\nReturn string:\n\nReturn string Description\n\nPROCESS In progress\n\nPAIRFAIL Wrong password\n\nFAIL Connect fail\n\nOK connected",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "operationId": "wlanGetConnectState",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "PROCESS": {
                    "summary": "In progress",
                    "value": "PROCESS"
                  },
                  "PAIRFAIL": {
                    "summary": "Wrong password",
                    "value": "PAIRFAIL"
                  },
                  "FAIL": {
                    "summary": "Connect fail",
                    "value": "FAIL"
                  },
                  "OK": {
                    "summary": "Connected",
                    "value": "OK"
                  }
                }
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/setWlanStaticIp:{IpAddress}:{GatewayIp}:{DnsServerIp}": {
      "get": {
        "tags": [
          "Network"
        ],
        "summary": "Set static WLAN network config",
        "description": "Example: https://10.10.10.254/httpapi.asp?command=setWlanStaticIp:ipAddr=192.168.1.100/24:gateWay=192.168.1.1:dnsServer=8.8.8.8\n\nKeyword args:\n- ipAddr: Static IP address to set + netmask\n- gateWay: Gateway\n- dnsServer: The DNS Server (default: 8.8.8.8)",
        "externalDocs": {
          "description": "WiiM Extended HTTP API by DanBrezeanu",
          "url": "https://github.com/DanBrezeanu/wiim-extended-http-api"
        },
        "operationId": "setWlanStaticIp",
        "parameters": [
          {
            "name": "IpAddress",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Static IP address to set + netmask",
            "example": "192.168.0.123/24"
          },
          {
            "name": "GatewayIp",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "192.168.0.1",
            "description": "Gateway IP address"
          },
          {
            "name": "DnsServerIp",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The DNS Server (default: 8.8.8.8)",
            "example": "8.8.8.8"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/StringOK"
          }
        }
      }
    },
    "/EQOn": {
      "get": {
        "summary": "Turn on the EQ",
        "description": "https://10.10.10.254/httpapi.asp?command=EQOn",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "OK": {
                    "summary": "OK",
                    "value": {
                      "status": "OK"
                    }
                  },
                  "FAILED": {
                    "summary": "Failed",
                    "value": {
                      "status": "Failed"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Equalizer"
        ],
        "operationId": "setEQOn"
      }
    },
    "/EQOff": {
      "get": {
        "summary": "Turn off the EQ setting",
        "description": "https://10.10.10.254/httpapi.asp?command=EQOff\n",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "OK": {
                    "summary": "OK",
                    "value": {
                      "status": "OK"
                    }
                  },
                  "FAILED": {
                    "summary": "Failed",
                    "value": {
                      "status": "Failed"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Equalizer"
        ],
        "operationId": "setEQOff"
      }
    },
    "/EQGetStat": {
      "get": {
        "summary": "Check if the EQ is ON or OFF",
        "description": "http://10.10.10.254/httpapi.asp?command=EQGetStat\n\nJSON Response:\n{\"EQStat\":\"On\"} or {\"EQStat\":\"Off\"}",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "text/html": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "Equalizer"
        ],
        "operationId": "getEQStat"
      }
    },
    "/EQGetList": {
      "get": {
        "summary": "Check all the possible EQ settings",
        "description": "http://10.10.10.254/httpapi.asp?command=EQGetList\n\n\nResponse:\n\n[\"Flat\", \"Acoustic\", \"Bass Booster\", \"Bass Reducer\", \"Classical\",\n\"Dance\", \"Deep\", \"Electronic\",\n\n\"Hip-Hop\", \"Jazz\", \"Latin\", \"Loudness\", \"Lounge\", \"Piano\", \"Pop\", \"R&B\",\n\"Rock\", \"Small\n\nSpeakers\", \"Spoken Word\", \"Treble Booster\", \"Treble Reducer\", \"Vocal\nBooster\"]\n",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "text/html": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "Equalizer"
        ],
        "operationId": "getEQList"
      }
    },
    "/EQLoad:{name}": {
      "get": {
        "summary": "Set the specific EQ with name",
        "description": "http://10.10.10.254/httpapi.asp?command=EQLoad:xxx\n\n\nNote: xxx is the one of the name in the list returned by EQGetList,\ni.e., EQLoad:Flat",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Flat",
                "Acoustic",
                "Bass Booster",
                "Bass Reducer",
                "Classical",
                "Dance",
                "Deep",
                "Electronic",
                "Hip-Hop",
                "Jazz",
                "Latin",
                "Loudness",
                "Lounge",
                "Piano",
                "Pop",
                "R&B",
                "Rock",
                "Small Speakers",
                "Spoken Word",
                "Treble Booster",
                "Treble Reducer",
                "Vocal Booster"
              ]
            },
            "description": "The name in the list returned by EQGetList, i.e., EQLoad:Flat"
          }
        ],
        "operationId": "loadEQByName",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "OK": {
                    "summary": "OK",
                    "value": {
                      "status": "OK"
                    }
                  },
                  "FAILED": {
                    "summary": "Failed",
                    "value": {
                      "status": "Failed"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Equalizer"
        ]
      }
    },
    "/reboot": {
      "get": {
        "summary": "Reboot",
        "description": "http://10.10.10.254/httpapi.asp?command=reboot\n\nJSON Response:\n{\"status\":\"OK\"}",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [],
        "operationId": "rebootDevice",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "OK": {
                    "summary": "Response",
                    "value": {
                      "status": "OK"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Device control"
        ]
      }
    },
    "/setShutdown:{sec}": {
      "get": {
        "summary": "Shutdown",
        "description": "http://10.10.10.254/httpapi.asp?command=setShutdown:sec\n\nShutdown device in sec\n\nsec:\n0: shutdown immediately\n-1: cancel the previous shutdown timer\n",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [
          {
            "name": "sec",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "default": "0"
            },
            "description": "Shutdown device in sec\n\n0: shutdown immediately\n-1: cancel the previous shutdown timer"
          }
        ],
        "operationId": "setShutdownTimer",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "OK": {
                    "summary": "OK",
                    "value": {
                      "status": "OK"
                    }
                  },
                  "FAILED": {
                    "summary": "Failed",
                    "value": {
                      "status": "Failed"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Device control"
        ]
      }
    },
    "/getShutdown": {
      "get": {
        "summary": "Get the shutdown timer",
        "description": "http://10.10.10.254/httpapi.asp?command=getShutdown\n\nReturn the seconds\n",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [],
        "operationId": "getShutdownTimer",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "integer"
                },
                "examples": {
                  "OK": {
                    "summary": "Number of seconds",
                    "value": 0
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Device control"
        ]
      }
    },
    "/LED_SWITCH_SET:{n}": {
      "get": {
        "summary": "Turn on/off status LED (\"Status Light\" option from app)",
        "description": "Example: https://10.10.10.254/httpapi.asp?command=LED_SWITCH_SET:0\n\nObservations:\n- Value is either 1 (on) or 0 (off)",
        "tags": [
          "Device control"
        ],
        "externalDocs": {
          "description": "WiiM Extended HTTP API by DanBrezeanu",
          "url": "https://github.com/DanBrezeanu/wiim-extended-http-api"
        },
        "operationId": "setLedSwitch",
        "parameters": [
          {
            "name": "n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 1
            },
            "description": "1 (on) or 0 (off)"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/StringOK"
          }
        }
      }
    },
    "/Button_Enable_SET:{n}": {
      "get": {
        "summary": "Turn on/off touch controls",
        "description": "Example: https://10.10.10.254/httpapi.asp?command=Button_Enable_SET:0\n\nObservations:\n- Value is either 1 (on) or 0 (off)",
        "tags": [
          "Device control"
        ],
        "externalDocs": {
          "description": "WiiM Extended HTTP API by DanBrezeanu",
          "url": "https://github.com/DanBrezeanu/wiim-extended-http-api"
        },
        "operationId": "setTouchControls",
        "parameters": [
          {
            "name": "n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 1
            },
            "description": "1 (on) or 0 (off)"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/StringOK"
          }
        }
      }
    },
    "/timeSync:{YYYYMMDDHHMMSS}": {
      "get": {
        "summary": "Get network time",
        "description": "If the device has no internet access, you need to sync its time with:\n\n\nhttp://10.10.10.254/httpapi.asp?command=timeSync:YYYYMMDDHHMMSS\n\n\nYYYY is year (such as 2015), MM is month (01~12), DD is day (01~31), HH\nis hour (00~23),\n\nMM is minute (00~59), SS is second (00~59)\n\n\nIn UTC",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [
          {
            "name": "YYYYMMDDHHMMSS",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "setTimeSync",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "text/html": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "Alarm clock"
        ]
      }
    },
    "/setAlarmClock:{n}:{trig}:{op}:{time}:{day}:{url}": {
      "get": {
        "summary": "Set Alarm",
        "description": "http://10.10.10.254/httpapi.asp?command=setAlarmClock:n:trig:op:time[:day][:url]\n\n\nn: 0~2, currently support max 3 alarm\n\n\ntrig: the alarm trigger:\n\n0 cancel the alarm, for example: setAlarmClock:n:0\n\n1 once, day should be YYYYMMDD\n\n2 every day\n\n3 every week, day should be 2 bytes (\"00\"~\"06\"), means from Sunday to\nSaturday.\n\n4 every week, day should be 2 bytes, the bit 0 to bit 6 means the\neffect, for example,\n\n\"7F\" means every day in week, \"01\" means only Sunday\n\n5 every month, day should be 2 bytes (\"01\"~\"31\")\n\n\nop: the action\n\n0 shell execute\n\n1 playback or ring\n\n2 stop playback\n\ntime: should be HHMMSS, in UTC\n\n\nday:\n\nif trigger is 0 or 2, no need to set.\n\nif trigger is 1, should be YYYYMMDD ( %04d%02d%02d)\n\nif trigger is 3, day should be 2 bytes (\"00\"~\"06\"), means from Sunday to\nSaturday.\n\nif trigger is 4, day should be 2 bytes, the bit 0 to bit 6 means the\neffect, for example,\n\n\"7F\" means every day in week, \"01\" means only Sunday\n\nif trigger is 5, day should be 2 bytes (\"01\"~\"31\")\n\n\nurl: the shell path or playback url, should less than 256 bytes",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [
          {
            "name": "n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1,
                2
              ]
            },
            "description": "The alarm clock number\n\ncurrently support max 3 alarm\n"
          },
          {
            "name": "trig",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1,
                2,
                3,
                4,
                5
              ]
            },
            "description": "The alarm trigger\n\n\n0 cancel the alarm, for example: setAlarmClock:n:0\n\n1 once, day should be YYYYMMDD\n\n2 every day\n\n3 every week, day should be 2 bytes (00\"~\"06\"), means from Sunday to\nSaturday.\n\n4 every week, day should be 2 bytes, the bit 0 to bit 6 means the\neffect, for example,\n\n\"7F\" means every day in week, \"01\" means only Sunday\n\n5 every month, day should be 2 bytes (\"01\"~\"31\")\n"
          },
          {
            "name": "op",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1,
                2
              ]
            },
            "description": "The action\n\n0 shell execute\n1 playback or ring\n2 stop playback\n"
          },
          {
            "name": "time",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "should be HHMMSS, in UTC"
          },
          {
            "name": "day",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "if trigger is 0 or 2, no need to set.\n\n\nif trigger is 1, should be YYYYMMDD ( %04d%02d%02d)\n\n\nif trigger is 3, day should be 2 bytes (\"00\"~\"06\"), means from\nSunday to Saturday.\n\n\nif trigger is 4, day should be 2 bytes, the bit 0 to bit 6 means the\neffect, for example,\n\n\"7F\" means every day in week, \"01\" means only Sunday\n\n\nif trigger is 5, day should be 2 bytes (\"01\"~\"31\")"
          },
          {
            "name": "url",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The shell path or playback url, should less than 256 bytes"
          }
        ],
        "operationId": "setAlarmClock",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "text/html": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "Alarm clock"
        ]
      }
    },
    "/getAlarmClock:{n}": {
      "get": {
        "summary": "",
        "description": "http://10.10.10.254/httpapi.asp?command=getAlarmClock:n\n\nn: 0~2, currently support max 3 alarm\n{\"enable\":\"1\",\n\"trigger\":\"%d\",\n\"operation\":\"%d\",\n\"date\"::\"%02d:%02d:%02d\", //if not a \"every day\" alarm, no this\n\"week_day\":\"%d\", //if not a \"every week\" alarm, no this\n\"day\":\"%02d\", //if not a \"every month\" alarm, no this\n\"time\":\"%02d:02d:%02d\",\n\"path\":\"%s\"\"}\n",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [
          {
            "name": "n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1,
                2
              ],
              "default": 0
            },
            "description": "The alarm clock number"
          }
        ],
        "operationId": "getAlarmClock",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "Alarm clock"
        ]
      }
    },
    "/alarmStop": {
      "get": {
        "summary": "Stop the current alarm",
        "description": "http://10.10.10.254/httpapi.asp?command=alarmStop",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [],
        "operationId": "stopAlarmClock",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "text/html": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "Alarm clock"
        ]
      }
    },
    "/setPlayerCmd:switchmode:{mode}": {
      "get": {
        "summary": "Switch the source input",
        "description": "http://10.10.10.254/httpapi.asp?command=setPlayerCmd:switchmode:%s\n\nthe mode can be the text as below:\n- line-in (it refers to aux-in too)\n- bluetooth\n- optical\n- udisk\n- wifi\n",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [
          {
            "name": "mode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "line-in",
                "bluetooth",
                "optical",
                "udisk",
                "wifi"
              ]
            }
          }
        ],
        "operationId": "setPlayerCmdSwitchMode",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "text/html": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "Source Input Switch"
        ]
      }
    },
    "/MCUKeyShortClick:{n}": {
      "get": {
        "summary": "Play preset with preset number",
        "description": "http://10.10.10.254/httpapi.asp?command=MCUKeyShortClick:%d\n\n%d: Range is from 1 to 12\n",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [
          {
            "name": "n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "enum": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12
              ],
              "default": 1
            },
            "description": "Preset number"
          }
        ],
        "operationId": "getMCUKeyShortClick",
        "responses": {
          "200": {
            "$ref": "#/components/responses/StringOK"
          }
        },
        "tags": [
          "Presets"
        ]
      }
    },
    "/getPresetInfo": {
      "get": {
        "summary": "Get Preset List",
        "description": "http://10.10.10.254/httpapi.asp?command=getPresetInfo\n\n\nJSON Response\n\n{\n  \"preset_num\": 3,\n  \"preset_list\": [\n  {\n    \"number\": 1,\n    \"name\": \"BBC Radio Norfolk\",\n    \"url\": \"http:\\/\\/as-hls-wwlive.akamaized.net\\/pool_904\\/live\\/ww\\/bbc_radio_norfolk\\/bbc_radio_norfolk.isml\\/bbc_radio_norfolk-audio%3d96000.norewind.m3u8\",\n    \"source\": \"Linkplay Radio\",\n    \"picurl\": \"http:\\/\\/cdnprofiles.tunein.com\\/s6852\\/images\\/logoq.jpg?t=638353933090000000\"\n  }, \n  {\n    \"number\": 6,\n    \"name\": \"Radio Paradise\",\n    \"url\": \"http:\\/\\/stream.radioparadise.com\\/flacm\",\n    \"source\": \"RadioParadise\",\n    \"picurl\": \"https:\\/\\/cdnprofiles.tunein.com\\/s13606\\/images\\/logod.png?t=637541039930000000\"\n  }, \n  {\n    \"number\": 8,\n    \"name\": \"1. Country Heat\",\n    \"url\": \"unknow\",\n    \"source\": \"Prime\",\n    \"picurl\": \"https:\\/\\/m.media-amazon.com\\/images\\/I\\/51uR6AJUAQL.jpg\"\n  }\n  ]\n}\n\n\nDescription\n\nField type Description\n\npreset_num int Total number of presets\n\npreset_list json array Preset list information\n\nnumber int Preset index (Start from 1)\n\nname string Playlist name\n\nurl string Play url\n\nsource string Music source\n\npicurl string Cover picture url\n",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [],
        "operationId": "getPresetInfo",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/PresetList"
                }
              }
            }
          }
        },
        "tags": [
          "Presets"
        ]
      }
    },
    "/getNewAudioOutputHardwareMode": {
      "get": {
        "summary": "Get audio output mode",
        "description": "JSON Response:\n{\"hardware\":\"2\",\"source\":\"0\",\"audiocast\":\"0\"}\n\nDescription:\nField Description\nhardware Hardware Interface output mode:\n1: AUDIO_OUTPUT_SPDIF_MODE\n2: AUDIO_OUTPUT_AUX_MODE\n3: AUDIO_OUTPUT_COAX_MODE\nsource BT source output mode:\n0: disable\n1: active\naudiocast Audio cast output mode:\n0: disable\n1: active",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hardware": {
                      "type": "string",
                      "description": "Hardware Interface output mode:\n1: AUDIO_OUTPUT_SPDIF_MODE\n2: AUDIO_OUTPUT_AUX_MODE\n3: AUDIO_OUTPUT_COAX_MODE",
                      "example": "2"
                    },
                    "source": {
                      "type": "string",
                      "description": "BT source output mode:\n0: disable\n1: active",
                      "example": "0"
                    },
                    "audiocast": {
                      "type": "string",
                      "description": "Audio cast output mode:\n0: disable\n1: active",
                      "example": "0"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Audio Output Control"
        ],
        "operationId": "getNewAudioOutputHardwareMode"
      }
    },
    "/setAudioOutputHardwareMode:{n}": {
      "get": {
        "summary": "Set audio output mode",
        "description": "Field Description\nHardware Interface output mode:\n1: AUDIO_OUTPUT_SPDIF_MODE\n2: AUDIO_OUTPUT_AUX_MODE\n3: AUDIO_OUTPUT_COAX_MODE\nResponse is 'OK'",
        "externalDocs": {
          "description": "HTTP API for WiiM PRODUCTS Version 1.2",
          "url": "https://www.wiimhome.com/pdf/HTTP%20API%20for%20WiiM%20Products.pdf"
        },
        "parameters": [
          {
            "name": "n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "enum": [
                1,
                2,
                3
              ]
            },
            "description": "Hardware Interface output mode:\n1: AUDIO_OUTPUT_SPDIF_MODE\n2: AUDIO_OUTPUT_AUX_MODE\n3: AUDIO_OUTPUT_COAX_MODE"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/StringOK"
          }
        },
        "tags": [
          "Audio Output Control"
        ],
        "operationId": "setAudioOutputHardwareMode"
      }
    },
    "/getSpdifOutSwitchDelayMs": {
      "get": {
        "summary": "Get SPDIF sample rate switch latency",
        "description": "Example: https://10.10.10.254/httpapi.asp?command=getSpdifOutSwitchDelayMs\n\nObservations:\n- This value only makes sense if the output interface is SPDIF (optical out).\n- Value can be retrieved even if output is not SPDIF",
        "tags": [
          "Audio Output Control"
        ],
        "externalDocs": {
          "description": "WiiM Extended HTTP API by DanBrezeanu",
          "url": "https://github.com/DanBrezeanu/wiim-extended-http-api"
        },
        "operationId": "getSpdifOutSwitchDelayMs",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "integer",
                  "description": "milliseconds",
                  "example": 800
                }
              }
            }
          }
        }
      }
    },
    "/setSpdifOutSwitchDelayMs:{Delay}": {
      "get": {
        "summary": "Set SPDIF sample rate switch latency",
        "description": "Example: https://10.10.10.254/httpapi.asp?command=setSpdifOutSwitchDelayMs:800\n\nObservations:\n- Delay is in milliseconds\n- Value can be set even if output is not SPDIF\n- Delay is upper bound to 3000 milliseconds",
        "tags": [
          "Audio Output Control"
        ],
        "externalDocs": {
          "description": "WiiM Extended HTTP API by DanBrezeanu",
          "url": "https://github.com/DanBrezeanu/wiim-extended-http-api"
        },
        "operationId": "setSpdifOutSwitchDelayMs",
        "parameters": [
          {
            "name": "Delay",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The delay in milliseconds"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/StringOK"
          }
        }
      }
    },
    "/getChannelBalance": {
      "get": {
        "summary": "Get left/right channel balance",
        "description": "Example: https://10.10.10.254/httpapi.asp?command=getChannelBalance\n\nObservations:\n- The value will be a number ranging from -1.0 (fully panned left) to 1.0 (fully panned right).",
        "tags": [
          "Audio Output Control"
        ],
        "externalDocs": {
          "description": "WiiM Extended HTTP API by DanBrezeanu",
          "url": "https://github.com/DanBrezeanu/wiim-extended-http-api"
        },
        "operationId": "getChannelBalance",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string",
                  "description": "-1.0 to 1.0, where 0.0 is centered",
                  "example": "0.0"
                }
              }
            }
          }
        }
      }
    },
    "/setChannelBalance:{n}": {
      "get": {
        "summary": "Set left/right channel balance",
        "description": "Example: https://10.10.10.254/httpapi.asp?command=setChannelBalance:0\n\nObservations:\n- The value must be a number ranging from -1.0 (fully panned left) to 1.0 (fully panned right).",
        "tags": [
          "Audio Output Control"
        ],
        "externalDocs": {
          "description": "WiiM Extended HTTP API by DanBrezeanu",
          "url": "https://github.com/DanBrezeanu/wiim-extended-http-api"
        },
        "operationId": "setChannelBalance",
        "parameters": [
          {
            "name": "n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            },
            "description": "Balance from -1.0 (left) to 1.0 (right)",
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "OK": {
                    "summary": "Response OK",
                    "value": "OK"
                  },
                  "Failed": {
                    "summary": "Response Failed",
                    "value": "Failed"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/startbtdiscovery:3": {
      "get": {
        "tags": [
          "Bluetooth"
        ],
        "summary": "Start Bluetooth device scan",
        "description": "Args: 3 (Not sure what this argument means, I've only seen the app use the value 3 for it. Works with other integers and successfully starts a BT scan. Maybe a max list size?)",
        "externalDocs": {
          "description": "WiiM Extended HTTP API by DanBrezeanu",
          "url": "https://github.com/DanBrezeanu/wiim-extended-http-api"
        },
        "operationId": "startBtDiscovery",
        "responses": {
          "200": {
            "$ref": "#/components/responses/StringOK"
          }
        }
      }
    },
    "/getbtdiscoveryresult": {
      "get": {
        "tags": [
          "Bluetooth"
        ],
        "summary": "Get Bluetooth device scan result",
        "description": "First do a startbtdiscovery:3: to start the scan, then use this to get the result.\n\nOutput (JSON):\nnum: Number of found devices\nscan_status: BT scan step\n  0: Not started\n  1: Initializing\n  2: ??? (never seen it)\n  3: Scanning\n  4: Finished scanning\nlist: List of found devices\n\nAlready paired devices may be listed as well.",
        "externalDocs": {
          "description": "WiiM Extended HTTP API by DanBrezeanu",
          "url": "https://github.com/DanBrezeanu/wiim-extended-http-api"
        },
        "operationId": "getBtDiscoveryResult",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/BluetoothDeviceList"
                }
              }
            }
          }
        }
      }
    },
    "/clearbtdiscoveryresult": {
      "get": {
        "tags": [
          "Bluetooth"
        ],
        "summary": "Clear Bluetooth device scan result",
        "description": "Clears the Bluetooth device scan results",
        "externalDocs": {
          "description": "WiiM Extended HTTP API by DanBrezeanu",
          "url": "https://github.com/DanBrezeanu/wiim-extended-http-api"
        },
        "operationId": "clearBtDiscoveryResult",
        "responses": {
          "200": {
            "$ref": "#/components/responses/StringOK"
          }
        }
      }
    },
    "/getbthistory": {
      "get": {
        "tags": [
          "Bluetooth"
        ],
        "summary": "Get paired Bluetooth devices",
        "description": "Output (JSON):\n\nnum: Number of found devices\nscan_status: BT scan step\n1: Initializing\n2: ??? (never seen it)\n3: Scanning\n4: Finished scanning\nlist: List of found devices",
        "externalDocs": {
          "description": "WiiM Extended HTTP API by DanBrezeanu",
          "url": "https://github.com/DanBrezeanu/wiim-extended-http-api"
        },
        "operationId": "getBtHistory",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/BluetoothDeviceList"
                }
              }
            }
          }
        }
      }
    },
    "/connectbta2dpsynk:{BT_MAC_ADDRESS}": {
      "get": {
        "tags": [
          "Bluetooth"
        ],
        "summary": "Connect to a Bluetooth device",
        "description": "Example: https://192.168.1.100/httpapi.asp?command=connectbta2dpsynk:9c:2a:be:2e:ce:f1\n\nOutput:\nSuccess: OK\nError: Failed\n\nObservations: The device should be an Audio Sink (e.g. speaker, A/V reciever). The audio output will be changed to the device.",
        "externalDocs": {
          "description": "WiiM Extended HTTP API by DanBrezeanu",
          "url": "https://github.com/DanBrezeanu/wiim-extended-http-api"
        },
        "operationId": "connectBtA2dpsynk",
        "parameters": [
          {
            "$ref": "#/components/parameters/BT_MAC_ADDRESS"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "OK": {
                    "summary": "Response OK",
                    "value": "OK"
                  },
                  "Failed": {
                    "summary": "Response Failed",
                    "value": "Failed"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/disconnectbta2dpsynk:{BT_MAC_ADDRESS}": {
      "get": {
        "tags": [
          "Bluetooth"
        ],
        "summary": "Disconnect from a Bluetooth device",
        "description": "Example: https://192.168.1.100/httpapi.asp?command=disconnectbta2dpsynk:9c:2a:be:2e:ce:f1",
        "externalDocs": {
          "description": "WiiM Extended HTTP API by DanBrezeanu",
          "url": "https://github.com/DanBrezeanu/wiim-extended-http-api"
        },
        "operationId": "disconnectBtA2dpsynk",
        "parameters": [
          {
            "$ref": "#/components/parameters/BT_MAC_ADDRESS"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/StringOK"
          }
        }
      }
    },
    "/getbtpairstatus": {
      "get": {
        "tags": [
          "Bluetooth"
        ],
        "summary": "Get Bluetooth pairing status",
        "description": "Example: https://192.168.1.100/httpapi.asp?command=getbtpairstatus\n\nOutput (JSON):\nresult: Pair status\n0: Not paired\n1: Disconnected\n2: Connecting (assumption, never seen it)\n3: Connected",
        "externalDocs": {
          "description": "WiiM Extended HTTP API by DanBrezeanu",
          "url": "https://github.com/DanBrezeanu/wiim-extended-http-api"
        },
        "operationId": "getBtPairStatus",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "integer",
                      "description": "Pair status\n0: Not paired\n1: Disconnected\n2: Connecting\n3: Connected",
                      "example": 1,
                      "enum": [
                        0,
                        1,
                        2,
                        3
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/getMvRemoteSilenceUpdateTime": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "...",
        "description": "...",
        "externalDocs": {
          "description": "WiiM Extended HTTP API by DanBrezeanu",
          "url": "https://github.com/DanBrezeanu/wiim-extended-http-api"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/getNetworkPreferDNS": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "...",
        "description": "...",
        "externalDocs": {
          "description": "WiiM Extended HTTP API by DanBrezeanu",
          "url": "https://github.com/DanBrezeanu/wiim-extended-http-api"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/getWlanBandConfig": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "...",
        "description": "...",
        "externalDocs": {
          "description": "WiiM Extended HTTP API by DanBrezeanu",
          "url": "https://github.com/DanBrezeanu/wiim-extended-http-api"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/getWlanRoamConfig": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "...",
        "description": "...",
        "externalDocs": {
          "description": "WiiM Extended HTTP API by DanBrezeanu",
          "url": "https://github.com/DanBrezeanu/wiim-extended-http-api"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/getIPV6Enable": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "...",
        "description": "...",
        "externalDocs": {
          "description": "WiiM Extended HTTP API by DanBrezeanu",
          "url": "https://github.com/DanBrezeanu/wiim-extended-http-api"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/getSpdifOutMaxCap": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "...",
        "description": "...",
        "externalDocs": {
          "description": "WiiM Extended HTTP API by DanBrezeanu",
          "url": "https://github.com/DanBrezeanu/wiim-extended-http-api"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/getCoaxOutMaxCap": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "...",
        "description": "...",
        "externalDocs": {
          "description": "WiiM Extended HTTP API by DanBrezeanu",
          "url": "https://github.com/DanBrezeanu/wiim-extended-http-api"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/GetFadeFeature": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "...",
        "description": "...",
        "externalDocs": {
          "description": "WiiM Extended HTTP API by DanBrezeanu",
          "url": "https://github.com/DanBrezeanu/wiim-extended-http-api"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/getAuxVoltageSupportList": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "...",
        "description": "...",
        "externalDocs": {
          "description": "WiiM Extended HTTP API by DanBrezeanu",
          "url": "https://github.com/DanBrezeanu/wiim-extended-http-api"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/audio_cast:get_speaker_list": {
      "get": {
        "deprecated": true,
        "tags": [
          "Other"
        ],
        "summary": "...",
        "description": "...",
        "externalDocs": {
          "description": "WiiM Extended HTTP API by DanBrezeanu",
          "url": "https://github.com/DanBrezeanu/wiim-extended-http-api"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/getSoundCardModeSupportList": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "...",
        "description": "...",
        "externalDocs": {
          "description": "WiiM Extended HTTP API by DanBrezeanu",
          "url": "https://github.com/DanBrezeanu/wiim-extended-http-api"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/getActiveSoundCardOutputMode": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "...",
        "description": "...",
        "externalDocs": {
          "description": "WiiM Extended HTTP API by DanBrezeanu",
          "url": "https://github.com/DanBrezeanu/wiim-extended-http-api"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/setLightOperationBrightConfig:%7B%22auto_sense_enable%22:{s},%22default_bright%22:{b},%22disable%22:{d}%7D": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "WiiM Ultra enable/disable LCD",
        "description": "Example: https://10.10.10.254/httpapi.asp?command=setLightOperationBrightConfig:{%22auto_sense_enable%22:0,%22default_bright%22:1,%22disable%22:1}\n\nTurns the screen of the WiiM Ultra on or off",
        "externalDocs": {
          "description": "WiiM Forums - API for Wiim Amp?",
          "url": "https://forum.wiimhome.com/threads/api-for-wiim-amp.3306/#post-108841"
        },
        "operationId": "setLightOperationBrightConfig",
        "parameters": [
          {
            "name": "s",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "default": 0
            },
            "description": "autosense?"
          },
          {
            "name": "b",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "brightness?"
          },
          {
            "name": "d",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 1
            },
            "description": "disable: 1 (off) or 0 (on)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/multiroom:getSlaveList": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "Get a list of LinkPlay available",
        "description": "Example: http://10.10.10.254/httpapi.asp?command=multiroom:getSlaveList\n\nAllows to obtain the list of the devices using the same communication protocol.\n\nJSON output:\n{\n  \"Slaves\": \"1\",\n  \"Slave_list\": [\n    {\n      \"Name\": \"FA5100_a3f4\",\n      \"Mask\": \"0\",\n      \"Volume\": \"90\",\n      \"Mute\": \"0\",\n      \"Channel\": \"0\",\n      \"Ip\": \"10.10.10.100\",\n      \"Version\": \"WIFIAudio.1.2.2321\"\n    }\n  ]\n}\n\nField\tDescription\nSlaves\tNumber of LinkPlay available\nSlave_list\tInformation about each Sonoé iEast case available\nname\tName\nmask\tCase already in Multi-Room mode, Yes = 1, No = 0\nVolume\tVolume level\nMute\tEnable Mute mode, Yes = 1, Off = 0\nChannel\tWifi channel\nip\tIP address of the LinkPlay Boot\nversion\tfirmware version",
        "externalDocs": {
          "description": "LinkPlayAPI by n4archive",
          "url": "https://github.com/n4archive/LinkPlayAPI/blob/master/api.md"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/multiroom:SlaveKickout:{ip}": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "Removing a LinkPlay from the multi-room",
        "description": "Example: http://10.10.10.254/httpapi.asp?command=multiroom:SlaveKickout:ip\n\nAllows to remove from the multiroom mode a device Based on its IP address.",
        "externalDocs": {
          "description": "LinkPlayAPI by n4archive",
          "url": "https://github.com/n4archive/LinkPlayAPI/blob/master/api.md"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/multiroom:SlaveMask:{ip}": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "Hide the IP address of a LinkPlay",
        "description": "Example: http://10.10.10.254/httpapi.asp?command=multiroom:SlaveMask:ip\n\nAllows to integrate a multi-room mode a device Based on its IP address. It is thus rendered invisible from the IP network.",
        "externalDocs": {
          "description": "LinkPlayAPI by n4archive",
          "url": "https://github.com/n4archive/LinkPlayAPI/blob/master/api.md"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/multiroom:SlaveUnMask:{ip}": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "Releasing a Multi-Room Mode",
        "description": "Example: http://10.10.10.254/httpapi.asp?command=multiroom:SlaveUnMask:ip\n\nAllows to release from the multi-room mode based on its IP address. It is thus visible on the IP network.",
        "externalDocs": {
          "description": "LinkPlayAPI by n4archive",
          "url": "https://github.com/n4archive/LinkPlayAPI/blob/master/api.md"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/multiroom:SlaveVolume:{ip}:{volume}": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "Individual volume adjustment",
        "description": "Example: http://10.10.10.254/httpapi.asp?command=multiroom:SlaveVolume:ip:volume\n\nAllows you to adjust the individual volume of the each of the devicees via the IP address of the device and the definition of a value going from from 1 to 100. Note: these settings will be lost when deactivating multi-room mode (kickout)",
        "externalDocs": {
          "description": "LinkPlayAPI by n4archive",
          "url": "https://github.com/n4archive/LinkPlayAPI/blob/master/api.md"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/setPlayerCmd:slave_vol:{volume}": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "General Volume Adjustment",
        "description": "Example: http://10.10.10.254/httpapi.asp?command=setPlayerCmd:slave_vol:volume\n\nAdjusts the overal volume of the multi-room with the definition of a value ranging from 1 to 100. Note: thesis settings will be lost When disabling multi-room mode",
        "externalDocs": {
          "description": "LinkPlayAPI by n4archive",
          "url": "https://github.com/n4archive/LinkPlayAPI/blob/master/api.md"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/multiroom:SlaveMute:{ip}:{mute}": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "Individual muting",
        "description": "Example: http://10.10.10.254/httpapi.asp?command=multiroom:SlaveMute:ip:mute\n\nEnables the Mute on each device via the IP address of the device and by enabling (1) and disabling (0)",
        "externalDocs": {
          "description": "LinkPlayAPI by n4archive",
          "url": "https://github.com/n4archive/LinkPlayAPI/blob/master/api.md"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/setPlayerCmd:slave_mute:mute": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "General activation Mute",
        "description": "Example: http://10.10.10.254/httpapi.asp?command=setPlayerCmd:slave_mute:mute\n\nEnables the Mute on all devices",
        "externalDocs": {
          "description": "LinkPlayAPI by n4archive",
          "url": "https://github.com/n4archive/LinkPlayAPI/blob/master/api.md"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/setPlayerCmd:slave_mute:unmute": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "General Mute Disabling",
        "description": "Example: http://10.10.10.254/httpapi.asp?command=setPlayerCmd:slave_mute:unmute\n\nTo disable the mute mode overall the",
        "externalDocs": {
          "description": "LinkPlayAPI by n4archive",
          "url": "https://github.com/n4archive/LinkPlayAPI/blob/master/api.md"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/multiroom:SlaveChannel:{ip}:{channel}": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "Individual management of the audio signal Right / left",
        "description": "Example: http://10.10.10.254/httpapi.asp?command=multiroom:SlaveChannel:ip:channel\n\nEnables the Mute on Each of the devices via the IP address of the device and by this parameter to signal right only Channe0 = left and only 1 = Channel signal",
        "externalDocs": {
          "description": "LinkPlayAPI by n4archive",
          "url": "https://github.com/n4archive/LinkPlayAPI/blob/master/api.md"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/setPlayerCmd:{slave_channel}:{channel}": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "Overal management of the audio signal Right / left",
        "description": "Example: http://10.10.10.254/httpapi.asp?command=setPlayerCmd:slave_channel:channel\n\nEnables the Mute on Each of devices via the IP address of the device and by this parameter to signal right only Channel= 0 and left signal only 1 = Channel",
        "externalDocs": {
          "description": "LinkPlayAPI by n4archive",
          "url": "https://github.com/n4archive/LinkPlayAPI/blob/master/api.md"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/multiroom:SlaveSetDeviceName:{ip}:{s}": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "Individual definition of the device Name",
        "description": "Example: http://10.10.10.254/httpapi.asp?command=multiroom:SlaveSetDeviceName:%ip:%s\n\nIndividual settings of the name of the square in mode UPnP / Airplay",
        "externalDocs": {
          "description": "LinkPlayAPI by n4archive",
          "url": "https://github.com/n4archive/LinkPlayAPI/blob/master/api.md"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/multiroom:Ungroup": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "Disabling Multi-Room",
        "description": "Example: http://10.10.10.254/httpapi.asp?command=multiroom:Ungroup\n\nDisables the multi-room mode",
        "externalDocs": {
          "description": "LinkPlayAPI by n4archive",
          "url": "https://github.com/n4archive/LinkPlayAPI/blob/master/api.md"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/getMvRemoteUpdateStartCheck": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "Update search",
        "description": "Example: http://10.10.10.254/httpapi.asp?command=getMvRemoteUpdateStartCheck\n\nSearch for the firmware updates available",
        "externalDocs": {
          "description": "LinkPlayAPI by n4archive",
          "url": "https://github.com/n4archive/LinkPlayAPI/blob/master/api.md"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/getMvRemoteUpdateStart": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "Notification updates",
        "description": "Example: http://10.10.10.254/httpapi.asp?command=getMvRemoteUpdateStart\n\nAfter calling the interface, if a new version is available, the device starts to download updates. At the end of the download, the update process starts.\nWARNING: DO NOT POWER OFF DURING THIS PROCESS!!",
        "externalDocs": {
          "description": "LinkPlayAPI by n4archive",
          "url": "https://github.com/n4archive/LinkPlayAPI/blob/master/api.md"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/getMvRemoteUpdateStatus": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "Status of the update process",
        "description": "Example: http://10.10.10.254/httpapi.asp?command=getMvRemoteUpdateStatus\n\nGet the download progress.\n\nValue\tMeaning\n- 10\tUnder review\n- 20  ...\n- 21\tThe verification of the downloaded update file failed\n- 22\tDownloading the update file failed\n- 23\tThe verification of the downloaded update file failed\n- 25\tStart downloading\n- 27\tDownload complete\n- 30\tDownloading and verification completed",
        "externalDocs": {
          "description": "LinkPlayAPI by n4archive",
          "url": "https://github.com/n4archive/LinkPlayAPI/blob/master/api.md"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/getMvRomBurnPrecent": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "Status of the update process",
        "description": "Example: http://10.10.10.254/httpapi.asp?command=getMvRomBurnPrecent\n\nStatus of updating\n\n{\n  \" status \":\" 0 \",\" progress \":\" 50 \"\n}\n\nFields\tMeaning\nstatus\tState\nprogress\tProgress between 0 to 100%",
        "externalDocs": {
          "description": "LinkPlayAPI by n4archive",
          "url": "https://github.com/n4archive/LinkPlayAPI/blob/master/api.md"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/setSSID:{value}": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "Change the SSID name of the device",
        "description": "Example: http://10.10.10.254/httpapi.asp?command=setSSID:value\n\nSets a new network name (SSID) of the device in hexadecimal format",
        "externalDocs": {
          "description": "LinkPlayAPI by n4archive",
          "url": "https://github.com/n4archive/LinkPlayAPI/blob/master/api.md"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/setNetwork:{n}:{password}": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "Setting the password WIFI",
        "description": "Example: http://10.10.10.254/httpapi.asp?command=setNetwork:1:password\n\nSetting a new password using letters and / or numbers and crossing of setnetwork setting: 1 (Securing WIFI network (WPAPSK) in contrast, setnetwork: 0 (OPEN) makes the network open WIFI.\n\nNo response The system restarts after the validation of the new password.",
        "externalDocs": {
          "description": "LinkPlayAPI by n4archive",
          "url": "https://github.com/n4archive/LinkPlayAPI/blob/master/api.md"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/restoreToDefault": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "Restoring the factory setting",
        "description": "Example: http://10.10.10.254/httpapi.asp?command=restoreToDefault\n\nTo restore factory settings, erasing defined configurations. The device restarts.",
        "externalDocs": {
          "description": "LinkPlayAPI by n4archive",
          "url": "https://github.com/n4archive/LinkPlayAPI/blob/master/api.md"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/setPowerWifiDown": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "Stop WIFI signal",
        "description": "Example: http://10.10.10.254/httpapi.asp?command=setPowerWifiDown\n\nTurns off the wifi",
        "externalDocs": {
          "description": "LinkPlayAPI by n4archive",
          "url": "https://github.com/n4archive/LinkPlayAPI/blob/master/api.md"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/setDeviceName:{name}": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "Setting the name of device",
        "description": "Example: http://10.10.10.254/httpapi.asp?command=setDeviceName:%s\n\nSets the name UPnP, DLNA and Airplay of the device (Hex)",
        "externalDocs": {
          "description": "LinkPlayAPI by n4archive",
          "url": "https://github.com/n4archive/LinkPlayAPI/blob/master/api.md"
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    }
  },
  "externalDocs": {
    "url": "https://github.com/cvdlinden/wiim-httpapi"
  },
  "security": [],
  "components": {
    "links": {},
    "callbacks": {},
    "schemas": {
      "DeviceStatus": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string",
            "description": "The device language",
            "example": "en_us"
          },
          "ssid": {
            "type": "string",
            "description": "Name of the device. Device's own SSID when in WiFi pairing\nmode or when device's WiFi hotspot is active",
            "example": "WiiM-1234"
          },
          "hideSSID": {
            "type": "string",
            "description": "When the device is operating as a WiFi hotspot, this flag\ndetermines whether its SSID should be hidden or visible 0:\nssid is visible 1: ssid is hidden",
            "example": "0"
          },
          "SSIDStrategy": {
            "type": "string",
            "example": "2"
          },
          "branch": {
            "type": "string",
            "description": "Code branch",
            "example": "A31_stable_4.6"
          },
          "firmware": {
            "type": "string",
            "description": "Current firmware version",
            "example": "Linkplay.5.0.704664"
          },
          "build": {
            "type": "string",
            "description": "Possible values: release, debug, backup release: this is a\nrelease version debug: this is a debug version backup:\nthis is a backup version",
            "example": "release"
          },
          "project": {
            "type": "string",
            "description": "The project name",
            "example": "WiiM_Mini"
          },
          "priv_prj": {
            "type": "string",
            "description": "Project name which would stand for a specific board",
            "example": "WiiM_Mini"
          },
          "project_build_name": {
            "type": "string",
            "description": "Code identifier for customized release",
            "example": "WiiM_Mini"
          },
          "Release": {
            "type": "string",
            "description": "Firmware build date Format: YYYYMMDD",
            "example": "20250101"
          },
          "FW_Release_version": {
            "type": "string",
            "description": "Reserved",
            "example": ""
          },
          "PCB_version": {
            "type": "string",
            "description": "PCB version/revision",
            "example": "5"
          },
          "cast_enable": {
            "type": "integer",
            "description": "Flag for casting feature 0: casting is disabled 1: casting\nis enabled",
            "example": 1
          },
          "cast_usage_report": {
            "type": "integer",
            "description": "Reserved",
            "example": 1
          },
          "group": {
            "type": "string",
            "description": "0 means it's a master speaker or standalone,  1 means a\nslave speaker in group",
            "example": "0"
          },
          "master_uuid": {
            "type": "string",
            "description": "Exist when working in slave mode, showing the UUID of\nmaster device.",
            "example": "A7A50887ACBC9B36"
          },
          "slave_mask": {
            "type": "string",
            "description": "Exist when working in slave mode, showing if the device\nsupport mask feature. 0 means not supported.",
            "example": "0"
          },
          "wmrm_version": {
            "type": "string",
            "description": "LinkPlay's MRM SDK version, Multiroom library version,\nversion 4.2 or above won't work with any version below 4.2",
            "example": "4.3"
          },
          "wmrm_sub_ver": {
            "type": "string",
            "description": "Multiroom library sub version",
            "example": "1"
          },
          "expired": {
            "type": "string",
            "description": "Reserved",
            "example": "0"
          },
          "internet": {
            "type": "string",
            "description": "Current status of internet access: 0: not ready 1: ready",
            "example": "1"
          },
          "uuid": {
            "type": "string",
            "description": "The unique ID of the device (will remain after device\nreboot)",
            "example": "FF31F09E1A5020113B0A3918"
          },
          "MAC": {
            "type": "string",
            "description": "MAC address of the device when working in hotspot mode,\nwill show on APP and also the sticker on module/device.",
            "example": "08:E9:F6:8F:8F:A2"
          },
          "STA_MAC": {
            "type": "string",
            "description": "MAC address of the device when working in station mode",
            "example": "00:00:00:00:00:00"
          },
          "BT_MAC": {
            "type": "string",
            "description": "The BT MAC address of the device",
            "example": "08:E9:F6:8F:8F:A3"
          },
          "AP_MAC": {
            "type": "string",
            "description": "The MAC address of the AP that the device is connected to",
            "example": "0A:E9:F6:8F:8F:A2"
          },
          "ETH_MAC": {
            "type": "string",
            "description": "The MAC address of the device when it's connected to\nethernet",
            "example": "08:E9:F6:8F:8F:A9"
          },
          "InitialConfiguration": {
            "type": "string",
            "description": "Flag for initial configuration 0: not configured 1:\nconfigured",
            "example": "1"
          },
          "temperature_power_control": {
            "type": "string",
            "description": "Reserved",
            "example": "1000"
          },
          "temperature_cpu": {
            "type": "string",
            "description": "Reserved",
            "example": "32"
          },
          "temperature_tmp102": {
            "type": "string",
            "description": "Reserved",
            "example": "-998"
          },
          "CountryCode": {
            "type": "string",
            "description": "The country code",
            "example": "US"
          },
          "CountryRegion": {
            "type": "string",
            "description": "The country region",
            "example": "1"
          },
          "date": {
            "type": "string",
            "description": "Current Date",
            "example": "2025:01:01"
          },
          "time": {
            "type": "string",
            "description": "Current local time",
            "example": "00:00:00"
          },
          "tz": {
            "type": "string",
            "description": "Timezone offset",
            "example": "0.0000"
          },
          "dst_enable": {
            "type": "string",
            "description": "Daylight saving time enable",
            "example": "1"
          },
          "netstat": {
            "type": "string",
            "description": "Current WiFi status: 0: no network 1: connected to the\ninternet 2: connected to the local network",
            "example": "1"
          },
          "essid": {
            "type": "string",
            "description": "SSID of the WiFi the device is connected to in HEX format",
            "example": ""
          },
          "apcli0": {
            "type": "string",
            "description": "The IP v4 address of the device over WiFi",
            "example": "0.0.0.0"
          },
          "eth0": {
            "type": "string",
            "description": "Device's IP address when it's connected to ethernet",
            "example": "192.168.167.73"
          },
          "eth2": {
            "type": "string",
            "description": "Device's IP address when it's connected to ethernet",
            "example": "192.168.167.74"
          },
          "eth_dhcp": {
            "type": "string",
            "description": "Flag for DHCP or Static IP Address 0: Static IP 1: IP\nAddress provided by LAN/WLAN DHCP Server",
            "example": "1"
          },
          "eth_static_ip": {
            "type": "string",
            "description": "Device's Static IP address (If eth_dhcp=0)",
            "example": "192.168.167.74"
          },
          "eth_static_mask": {
            "type": "string",
            "description": "Device's Network Mask (If eth_dhcp=0)",
            "example": "255.255.255.0"
          },
          "eth_static_gateway": {
            "type": "string",
            "description": "Device's IP Gateway (If eth_dhcp=0)",
            "example": "192.168.167.1"
          },
          "eth_static_dns1": {
            "type": "string",
            "description": "Device's Primary DNS Server (If eth_dhcp=0)",
            "example": "194.168.4.100"
          },
          "eth_static_dns2": {
            "type": "string",
            "description": "Device's Secondary DNS Server (If eth_dhcp=0)",
            "example": "194.168.8.100"
          },
          "hardware": {
            "type": "string",
            "description": "Hardware model",
            "example": "AmlogicA113"
          },
          "VersionUpdate": {
            "type": "string",
            "description": "Flag that determines, if there is a new firmware version\navailable or not. 0: no new firmware 1: new firmware\navailable",
            "example": "0"
          },
          "NewVer": {
            "type": "string",
            "description": "If there is a new firmware available (in case of\nVersionUpdate is set to 1), this is the new version number",
            "example": "0"
          },
          "mcu_ver": {
            "type": "string",
            "description": "Version of MCU on base board",
            "example": "0"
          },
          "mcu_ver_new": {
            "type": "string",
            "description": "New version of MCU on base board, indicates if there is a\nnewer version of MCU available 0 - No new version others -\nNew version",
            "example": "0"
          },
          "hdmi_ver": {
            "type": "string",
            "description": "HDMI version",
            "example": "41"
          },
          "hdmi_ver_new": {
            "type": "string",
            "description": "New HDMI version",
            "example": ""
          },
          "update_check_count": {
            "type": "string",
            "example": "32"
          },
          "BleRemote_update_checked_counter": {
            "type": "string",
            "example": "0"
          },
          "ra0": {
            "type": "string",
            "description": "WiFi AP IP address, normally it is 10.10.10.254",
            "example": "10.10.10.254"
          },
          "temp_uuid": {
            "type": "string",
            "description": "Temporary UUID (will change after device reboot)",
            "example": "FF31F09E1A5020113B0A3918"
          },
          "cap1": {
            "type": "string",
            "description": "Bit mask for the module feature, used internally",
            "example": "0x40000400"
          },
          "capability": {
            "type": "string",
            "description": "Bit mask for the module feature, used internally",
            "example": "0x20084808"
          },
          "languages": {
            "type": "string",
            "description": "Supported languages, bit mask",
            "example": "0x11ec"
          },
          "prompt_status": {
            "type": "string",
            "description": "Indicates if the prompting voice would be played or not,\nyou can set with command PromptEnable and PromptDisable. 0\n- No prompting voice 1 - Have prompting voice",
            "example": "1"
          },
          "iot_ver": {
            "type": "string",
            "description": "IOT library version, not used",
            "example": "1.0.0"
          },
          "alexa_ver": {
            "type": "string",
            "example": "20180604"
          },
          "alexa_beta_enable": {
            "type": "string",
            "example": "0"
          },
          "alexa_force_beta_cfg": {
            "type": "string",
            "example": "0"
          },
          "dsp_ver": {
            "type": "string",
            "description": "Version for voice processing, not used",
            "example": ""
          },
          "dsp_ver_new": {
            "type": "string",
            "description": "New version for voice processing, not used",
            "example": ""
          },
          "ModuleColorNumber": {
            "type": "string",
            "description": "Reserved",
            "example": "3"
          },
          "ModuleColorString": {
            "type": "string",
            "description": "Reserved",
            "example": ""
          },
          "uboot_verinfo": {
            "type": "string",
            "description": "Uboot version",
            "example": "231211.095208"
          },
          "streams_all": {
            "type": "string",
            "description": "Reserved",
            "example": "0x7bff7ffe"
          },
          "streams": {
            "type": "string",
            "description": "This is a bit mask: 0: If Airplay is enabled 1: If DLNA is\nenabled 2: Has TTPod support 3: Has TuneIn support 4: Has\nPandora support 5: Has DoubanFM support",
            "example": "0x7b9831fe"
          },
          "region": {
            "type": "string",
            "description": "Reserved",
            "example": "unknown"
          },
          "volume_control": {
            "type": "string",
            "example": "0"
          },
          "external": {
            "type": "string",
            "description": "Reserved (hex value)",
            "example": "0x0"
          },
          "preset_key": {
            "type": "string",
            "description": "Amount of preset keys available",
            "example": "12"
          },
          "spotify_active": {
            "type": "string",
            "description": "Spotify status 0: Spotify is not playing 1: Spotify is\nplaying",
            "example": "0"
          },
          "plm_support": {
            "type": "string",
            "description": "This is a bit mask, each bit stands for an external input\nsource: bit1: LineIn (Aux support) bit2: Bluetooth support\nbit3: USB support bit4: Optical support bit6: Coaxial\nsupport bit8: LineIn 2 support bit15: USBDAC support\nOthers are reserved or not used.",
            "example": "0x6"
          },
          "mqtt_support": {
            "type": "string",
            "description": "Reserved",
            "example": "1"
          },
          "lbc_support": {
            "type": "string",
            "description": "Reserved",
            "example": "0"
          },
          "WifiChannel": {
            "type": "string",
            "description": "The current connected WiFi channel",
            "example": "11"
          },
          "RSSI": {
            "type": "string",
            "description": "RSSI Level of used WiFi Value ranges from 0 - 100. 100\nmeans best signal strength.",
            "example": "0"
          },
          "BSSID": {
            "type": "string",
            "description": "The Basic Service Set Identifiers:  In most cases this\nwill be the MAC Address of the Wireless Acces Point Used\n(e.g. Router)",
            "example": ""
          },
          "wlanSnr": {
            "type": "string",
            "description": "Signal to Noise Ratio of the WiFi connection",
            "example": "0"
          },
          "wlanNoise": {
            "type": "string",
            "description": "Noise level of the WiFi connection",
            "example": "0"
          },
          "wlanFreq": {
            "type": "string",
            "example": "0"
          },
          "wlanDataRate": {
            "type": "string",
            "example": "0"
          },
          "battery": {
            "type": "string",
            "description": "Battery status 0: battery is not charging 1: battery is\ncharging",
            "example": "0"
          },
          "battery_percent": {
            "type": "string",
            "description": "Battery charge level Value ranges from 0 - 100",
            "example": "0"
          },
          "securemode": {
            "type": "string",
            "description": "Reserved",
            "example": "1"
          },
          "auth": {
            "type": "string",
            "description": "Type of WiFi Protected Access used (Authentication Key).",
            "example": "WPA2PSK"
          },
          "encry": {
            "type": "string",
            "description": "Type of encryption used for the WiFi connection.",
            "example": "AES"
          },
          "ota_interface_ver": {
            "type": "string",
            "example": "2.0"
          },
          "ota_api_ver": {
            "type": "string",
            "example": "3.0"
          },
          "upnp_version": {
            "type": "string",
            "description": "UPnP Device Architecture Version",
            "example": "1005"
          },
          "upnp_uuid": {
            "type": "string",
            "description": "UPnP UUID",
            "example": "uuid:FF31F09E-1A50-2011-3B0A-3918FF31F09E"
          },
          "uart_pass_port": {
            "type": "string",
            "description": "Port used for TCP/IP Communcations/Socket Connections",
            "example": "8899"
          },
          "communication_port": {
            "type": "string",
            "description": "TCP port for internal messages",
            "example": "8819"
          },
          "web_firmware_update_hide": {
            "type": "string",
            "example": "0"
          },
          "ignore_talkstart": {
            "type": "string",
            "example": "0"
          },
          "silence_ota_flag": {
            "type": "string",
            "example": "0"
          },
          "silenceOTATime": {
            "type": "string",
            "example": ""
          },
          "ignore_silenceOTATime": {
            "type": "string",
            "example": "1"
          },
          "new_tunein_preset_and_alarm": {
            "type": "string",
            "example": "1"
          },
          "iheartradio_new": {
            "type": "string",
            "example": "1"
          },
          "new_iheart_podcast": {
            "type": "string",
            "example": "1"
          },
          "tidal_version": {
            "type": "string",
            "description": "TIDAL API version",
            "example": "2.0"
          },
          "service_version": {
            "type": "string",
            "example": "1.0"
          },
          "EQ_support": {
            "type": "string",
            "example": "Eq4p_ver_2.0"
          },
          "EQVersion": {
            "type": "string",
            "example": "4.3"
          },
          "HiFiSRC_version": {
            "type": "string",
            "example": "1.1"
          },
          "audio_channel_config": {
            "type": "string",
            "example": "1"
          },
          "app_timezone_id": {
            "type": "string",
            "description": "Timezone ID",
            "example": "America/New_York"
          },
          "avs_timezone_id": {
            "type": "string",
            "description": "Timezone ID for Alexa",
            "example": "America/New_York"
          },
          "tz_info_ver": {
            "type": "string",
            "example": "1.0"
          },
          "max_volume": {
            "type": "string",
            "description": "Maximum volume level (normally 100)",
            "example": "100"
          },
          "power_mode": {
            "type": "string",
            "example": "-1"
          },
          "security": {
            "type": "string",
            "description": "HTTPS API version",
            "example": "https/2.0"
          },
          "security_version": {
            "type": "string",
            "description": "HTTPS API security version",
            "example": "3.0"
          },
          "security_capabilities": {
            "type": "object",
            "description": "HTTPS API security capabilities",
            "example": {
              "ver": "1.0",
              "aes_ver": "1.0"
            }
          },
          "public_https_version": {
            "type": "string",
            "description": "HTTPS API public version",
            "example": "1.0"
          },
          "BleRemoteControl": {
            "type": "string",
            "example": "1"
          },
          "BleRemoteConnected": {
            "type": "string",
            "example": "0"
          },
          "BleRemoteException": {
            "type": "string",
            "example": "0"
          },
          "udisk": {
            "type": "string",
            "description": "USB disk status 0: no USB disk 1: USB disk is connected",
            "example": "0"
          },
          "umount": {
            "type": "string",
            "description": "Reserved",
            "example": "0"
          },
          "autoSenseVersion": {
            "type": "string",
            "example": "1.0"
          },
          "set_play_mode_enable": {
            "type": "string",
            "example": "0"
          },
          "set_play_mode_gain": {
            "type": "string",
            "example": "0"
          },
          "audioOutputModeVer": {
            "type": "string",
            "example": "1.0"
          },
          "privacy_mode": {
            "type": "string",
            "example": "0"
          },
          "DeviceName": {
            "type": "string",
            "description": "The device UPnP and Airplay friendly name",
            "example": "WiiM Mini-8FA2"
          },
          "GroupName": {
            "type": "string",
            "description": "The group name of the device that it belongs to",
            "example": "WiiM Mini-8FA2"
          }
        }
      },
      "PlayerStatus": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "0: Main or standalone device \n1: Device is a Multiroom Guest",
            "example": "0"
          },
          "ch": {
            "type": "string",
            "description": "Active channel(s) 0: Stereo 1: Left 2: Right",
            "example": "0"
          },
          "mode": {
            "type": "string",
            "description": "0: None \n1: AirPlay or AirPlay 2 \n2: DLNA streaming \n10: Playing network content, e.g. vTuner, Home Media Share, Amazon Music, Deezer, etc \n11: playing UDISK (Local USB disk on device) 16: TF card playlist 20: playback start by HTTPAPI \n31: Spotify Connect \n32: TIDAL Connect \n40: AUX-In/Line-In input mode \n41: Bluetooth input mode \n42: External storage \n43: Optical-In input mode \n47: Line-In #2 input mode \n50: Mirror \n51: USBDAC input mode \n60: Voice mail\n99: The Device is a Guest in a Multiroom Zone",
            "example": "10"
          },
          "loop": {
            "type": "string",
            "description": "Is a Combination of SHUFFLE and REPEAT modes 0: SHUFFLE:\ndisabled REPEAT: enabled - loop 1: SHUFFLE: disabled\nREPEAT: enabled - loop once 2: SHUFFLE: enabled REPEAT:\nenabled - loop 3: SHUFFLE: enabled REPEAT: disabled 4:\nSHUFFLE: disabled REPEAT: disabled 5: SHUFFLE: enabled\nREPEAT: enabled - loop once",
            "example": "-1"
          },
          "eq": {
            "type": "string",
            "description": "The preset number of the Equalizer",
            "example": "0"
          },
          "vendor": {
            "type": "string",
            "description": "Name of the stream source",
            "example": "vTuner"
          },
          "status": {
            "type": "string",
            "description": "Playback status stop: no audio selected play: playing\naudio load/loading: loading/buffering audio pause: audio\npaused",
            "enum": [
              "play",
              "pause",
              "stop",
              "buffering"
            ],
            "example": "play"
          },
          "curpos": {
            "type": "string",
            "description": "Current position, in ms",
            "example": "63634"
          },
          "offset_pts": {
            "type": "string",
            "description": "Offset position, in ms",
            "example": "63634"
          },
          "totlen": {
            "type": "string",
            "description": "Track duration in ms. Zero when playing a live stream.",
            "example": "0"
          },
          "Title": {
            "type": "string",
            "description": "hexed string of the track title",
            "example": "4D6F726E696E67204C69676874"
          },
          "Artist": {
            "type": "string",
            "description": "hexed string of the artist",
            "example": "4F77656E20526965676C696E67"
          },
          "Album": {
            "type": "string",
            "description": "hexed string of the album",
            "example": "4D6F726E696E67204C69676874"
          },
          "alarmflag": {
            "type": "string",
            "example": "0"
          },
          "plicount": {
            "type": "string",
            "description": "The total number of tracks in the playlist",
            "example": "5"
          },
          "plicurr": {
            "type": "string",
            "description": "Current track index",
            "example": "2"
          },
          "vol": {
            "type": "string",
            "description": "Current volume Value range is from 0 - 100. So can be\nconsidered a linear percentage (0% to 100%) of the volume.",
            "example": "25"
          },
          "mute": {
            "type": "string",
            "description": "Current mute state 0: Not muted 1: Muted",
            "example": "0"
          }
        }
      },
      "TrackMetadata": {
        "type": "object",
        "properties": {
          "metaData": {
            "type": "object",
            "properties": {
              "album": {
                "type": "string",
                "description": "Album name",
                "example": "Country Heat"
              },
              "title": {
                "type": "string",
                "description": "Track title",
                "example": "Old Dirt Roads"
              },
              "subtitle": {
                "type": "string",
                "description": "Subtitle",
                "example": ""
              },
              "artist": {
                "type": "string",
                "description": "Artist name",
                "example": "Owen Riegling"
              },
              "albumArtURI": {
                "type": "string",
                "description": "URL to the album art",
                "example": "https://m.media-amazon.com/images/I/51iU0odzJwL.jpg"
              },
              "sampleRate": {
                "type": "string",
                "description": "Sample rate in Hz",
                "example": "44100"
              },
              "bitDepth": {
                "type": "string",
                "description": "Bit depth in bits",
                "example": "16"
              },
              "bitRate": {
                "type": "string",
                "description": "Bit rate in kbps",
                "example": "63"
              },
              "trackId": {
                "type": "string",
                "description": "Track ID",
                "example": "s6707"
              }
            }
          }
        }
      },
      "PresetList": {
        "type": "object",
        "properties": {
          "preset_num": {
            "type": "integer",
            "description": "Total number of presets",
            "example": 3
          },
          "preset_list": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "number": {
                  "type": "integer",
                  "description": "Preset index (Start from 1)",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "description": "Playlist name",
                  "example": "BBC Radio Norfolk"
                },
                "url": {
                  "type": "string",
                  "description": "Play url",
                  "example": "http://as-hls-wwlive.akamaized.net/pool_904/live/ww/bbc_radio_norfolk/bbc_radio_norfolk.isml/bbc_radio_norfolk-audio%3d96000.norewind.m3u8"
                },
                "source": {
                  "type": "string",
                  "description": "Music source",
                  "example": "Linkplay Radio"
                },
                "picurl": {
                  "type": "string",
                  "description": "Cover picture url",
                  "example": "http://cdnprofiles.tunein.com/s6852/images/logoq.jpg?t=638353933090000000"
                }
              }
            }
          }
        }
      },
      "StaticIpInfo": {
        "type": "object",
        "properties": {
          "wlanStaticIp": {
            "type": "string",
            "description": "Wifi IP address of the device"
          },
          "wlanGateWay": {
            "type": "string",
            "description": "Wifi IP address of the gateway"
          },
          "wlanDnsServer": {
            "type": "string",
            "description": "Wifi IP address of the DNS server"
          },
          "wlanStaticIpEnable": {
            "type": "integer",
            "description": "Status of the WiFi static IP configuration\n0: Disabled\n1: Enabled"
          },
          "ethStaticIp": {
            "type": "string",
            "description": "Wired IP address of the device"
          },
          "ethGateWay": {
            "type": "string",
            "description": "Wired IP address of the gateway"
          },
          "ethDnsServer": {
            "type": "string",
            "description": "Wired IP address of the DNS server"
          },
          "ethStaticIpEnable": {
            "type": "integer",
            "description": "Status of the wired static IP configuration\n0: Disabled\n1: Enabled"
          }
        }
      },
      "BluetoothDeviceList": {
        "type": "object",
        "properties": {
          "num": {
            "type": "integer",
            "description": "Number of devices found",
            "example": 1
          },
          "scan_status": {
            "type": "integer",
            "description": "BT scan step\n0: Not started\n1: Initializing\n2: ??? (never seen it)\n3: Scanning\n4: Finished scanning",
            "example": 4
          },
          "list": {
            "type": "array",
            "description": "List of devices found",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Device name",
                  "example": "My Device"
                },
                "ad": {
                  "type": "string",
                  "description": "MAC address",
                  "example": "00:11:22:33:44:55"
                },
                "ct": {
                  "type": "integer",
                  "description": "Connection type",
                  "example": 0
                },
                "role": {
                  "type": "string",
                  "description": "Role",
                  "example": "Audio Source"
                }
              }
            }
          }
        }
      }
    },
    "parameters": {
      "BT_MAC_ADDRESS": {
        "name": "BT_MAC_ADDRESS",
        "description": "The Bluetooth MAC address of the device you want to connect to or disconnect from",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "9c:2a:be:2e:ce:f1"
        }
      }
    },
    "responses": {
      "StringOK": {
        "description": "Successful response",
        "content": {
          "text/html": {
            "schema": {
              "type": "string",
              "example": "OK"
            }
          }
        }
      }
    }
  }
}
